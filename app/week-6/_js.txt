// Arrays

// Creating, accessing, modifying
// Methods: map, filter, sort, reduce

// creating an array
const arr = [];

// setting values
arr[0] = 3;
arr[1] = 4;
arr[2] = 5;

// creating an array again
const arr2 = [3, 4, 5];

// accessing values
console.log(arr2[1]); // 4

// map function - returns a new array with the results of calling a provided function on every element in the calling array
const arr3 = arr2.map((value) => value * 2); // [6, 8, 10]
// arr2 is still [3, 4, 5]
// arr3 is [6, 8, 10]

const arr4 = arr3; // arr4 is [6, 8, 10]
arr4[0] = 100;
// arr3 is [100, 8, 10]
const arr5 = arr3.map( n => n + 20); // [120, 28, 30]

// filter function - returns a new array with all elements that pass the test implemented by the provided function
arr5; // [120, 28, 30]
const arr6 = arr5.filter((value) => value > 100); // [120]

// reduce function - applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value
arr5; // [120, 28, 30]
const sum = arr5.reduce((acc, value) => acc + value, 0); // 178

// sort function - sorts the elements of an array in place and returns the sorted array
// This one is different because it modifies the original array. It doesn't return a new array.
const arr7 = [3, 1, 5, 2, 4, 10];
arr7.sort(); // [1, 10, 2, 3, 4, 5]  - it's not what we want, right? sort() by default sorts the array by converting the elements to strings
arr7.sort((a, b) => a - b); // [1, 2, 3, 4, 5, 10]
// sort takes a function as an argument. This function should return a negative number if a should come before b, a positive number if a should come after b, and 0 if they are equal.
arr7.sort((a,b) => { if (a < b) return -1; else return 1; }); // [1, 2, 3, 4, 5, 10]




